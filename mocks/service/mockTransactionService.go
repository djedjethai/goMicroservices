// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/djedjethai/bankingSqlx/service (interfaces: TransactionService)

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	dto "github.com/djedjethai/bankingSqlx/dto"
	errs "github.com/djedjethai/bankingSqlx/errs"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionService is a mock of TransactionService interface.
type MockTransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceMockRecorder
}

// MockTransactionServiceMockRecorder is the mock recorder for MockTransactionService.
type MockTransactionServiceMockRecorder struct {
	mock *MockTransactionService
}

// NewMockTransactionService creates a new mock instance.
func NewMockTransactionService(ctrl *gomock.Controller) *MockTransactionService {
	mock := &MockTransactionService{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService) EXPECT() *MockTransactionServiceMockRecorder {
	return m.recorder
}

// HandleTransaction mocks base method.
func (m *MockTransactionService) HandleTransaction(arg0 dto.NewTransactionRequest) (*dto.NewTransactionResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTransaction", arg0)
	ret0, _ := ret[0].(*dto.NewTransactionResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// HandleTransaction indicates an expected call of HandleTransaction.
func (mr *MockTransactionServiceMockRecorder) HandleTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTransaction", reflect.TypeOf((*MockTransactionService)(nil).HandleTransaction), arg0)
}
